---
title: Practice Set 4.2
echo: true
fig-height: 3.5
fig-width: 6
execute:
    warning: false
format:
  html:
    code-fold: true
    embed-resources: true
---
GitHub link: https://github.com/TylerWolfWilliams/GSB-544

## Setup

Run the code below to load the scrambled message:

```{python}
import pandas as pd

message = pd.read_csv("https://www.dropbox.com/s/lgpn3vmksk3ssdo/scrambled_message.txt?dl=1")['Word']

message
```

In this activity, a "word" refers to any set of characters with no white space, even though they are not truly an English word.  That is, even though many of elements of the scrambled message vector are nonsense, and some have punctuation, you can consider each element to be a "word".

Beware!  The object named `message` is a **pandas Series** of strings.  If you want to use functions that expect a string, rather than a series, remember `.apply()` and `lambda` functions.




## Warm-up exercises

1. How many characters are in the scrambled message?
2. How many of these characters are white space?
3. How many words are in the scrambled message?
4. Show all the punctuation marks in the scrambled message.
5. Print out, in all capitals, the longest word in the scrambled message.
6. Print out every piece of a word that starts with the letter "m" and ends with the letter "z" in the scrambled message.

```{python}
total_chars = message.apply(len).sum()
total_chars
```

There are 126 white characters, len-1 of message
```{python}
len(message)
```

```{python}
import re

re.findall(r"[^\w\s]", " ".join(message.tolist()))
```

```{python}
message.iloc[message.str.len().idxmax()].upper()
```

```{python}
matches_series = message.str.findall(r"(?i)m.*?z")
matches = [m for sub in matches_series for m in sub]
print(matches)
```



## Decode a message

Complete the following steps to decode the message.  

1. Remove any spaces before or after each word.
2. Any time you see the word "ugh", with any number of h's, followed by a punctuation mark, delete this.
3. No word should be longer than 16 characters. Drop all extra characters beyond 13 off the end of each word.
4. Replace all instances of exactly 2 a's with exactly 2 e's.
5. Replace all z's with t's.
6. Every word that ends in b, change that to a y.  *Hint: look out for punctuation!*
7. Every word that starts with k, change that to a v.  *Hint: look out for capitalization!*
8. Use `.join()` to recombine all your words into a message.
9. Find the movie this quote is from.

```{python}
import re
import string

clean = message.copy()

clean = clean.apply(lambda x: x.strip())

clean = clean.apply(lambda x: re.sub(f'ughh*[{string.punctuation}]', '', x))

clean = clean.apply(lambda x: x[:13])

clean = clean.apply(lambda x: re.sub(r"(?<!a)aa(?!a)", "ee", x))

clean = clean.apply(lambda x: x.replace('z', 't'))

clean = clean.apply(lambda x: re.sub(r"b(?=[^\w]*$)", "y", x))

clean = clean.apply(lambda x: re.sub(r'\bk', 'v', x, flags=re.IGNORECASE))

decoded = " ".join(clean.tolist())
print(decoded)
```